<?php

require 'vendor/autoload.php';

use React\EventLoop\Factory;
use React\Socket\ConnectionInterface;
use React\Socket\TcpServer;

function fetchServerIP()
{
    $curlCommand = 'curl -H "X-SECRET-KEY: *ini_rahasia*" http://localhost:88/api/getSetting';
    $ip_server_response = shell_exec($curlCommand);
    return json_decode($ip_server_response, true);
}

function kirimpesan($message, $ip)
{
    $postData = json_encode(['message_hasil' => $message, 'ip' => $ip]);
    $ch = curl_init('http://localhost:88/api/getmessage');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'X-SECRET-KEY: *ini_rahasia*',
        'Content-Type: application/json'
    ]);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);
    $response = curl_exec($ch);
    if (curl_errno($ch)) {
        throw new Exception(curl_error($ch));
    }
    $decodedResponse = json_decode($response, true);
    curl_close($ch);
    return $decodedResponse;
}

function checkPortUsage($port)
{
    exec("netstat -tuln | grep :$port", $output);
    return $output;
}

class ReactTCPServer
{
    private $clients = [];
    private $server;

    public function __construct($address)
    {
        $loop = Factory::create();
        $this->server = new TcpServer($address, $loop);

        $this->server->on('connection', function (ConnectionInterface $connection) {
            // ID Client
            $clientId = (int) $connection->stream;
            $this->clients[$clientId] = $connection;
            // ip Client
            $clientIP = parse_url($connection->getRemoteAddress(), PHP_URL_HOST);

            echo "-----------------------------------------------------";
            echo "Client $clientId connected from IP $clientIP\n";
            echo "-----------------------------------------------------";

            $connection->on('data', function ($data) use ($connection, $clientId, $clientIP) {
                $message_hasil = null;
                $msgs = explode(chr(0x0b), $data); // Split messages by HL7 message separator
                foreach ($msgs as $msg) {
                    $fields = explode(chr(0x0d), $msg); // Split message into fields by field separator
                    foreach ($fields as $field) {
                        $values = explode(chr(0x1c), $field); // Split field into components by component separator
                        $message_hasil .= $values[0] . "\n";
                    }
                }
                $pesan = kirimpesan($message_hasil, $clientIP);  // Corrected variable name in the function call
                print_r($pesan);
                // echo "Message hasil: \n\n\n";
                // print_r($message_hasil);
                // echo "\n\n\n";
                // echo "Received from client $clientId at IP $clientIP: -\n";
                // $connection->write("Echo: $data");
            });
            $connection->on('close', function () use ($clientId) {
                unset($this->clients[$clientId]);
                echo "Client $clientId disconnected\n";
            });
        });

        $loop->run();
    }

    public function getConnectedClients()
    {
        return array_keys($this->clients);
    }
}

// Fetch server IP and port from endpoint
$serverSettings = fetchServerIP();
$ip_server = $serverSettings['data']['ip_server'];
$port = $serverSettings['data']['port_terima'];

// Check if the port is in use and handle accordingly
$output = checkPortUsage($port);
if (!empty($output)) {
    print_r($output);
    preg_match('/\s+([0-9]+)\/.*/', $output[0], $matches);
    if (isset($matches[1])) {
        $pid = $matches[1];
        exec("kill -9 $pid", $killOutput, $killReturnValue);
        if ($killReturnValue == 0) {
            echo "\n Process using port $port has been terminated. \n";
        } else {
            echo "\n Failed to terminate process using port $port. \n";
        }
    }
} else {
    echo "\nPort $port is available for use. \n";
}

// Start the server
$address = "$ip_server:$port";
$server = new ReactTCPServer($address);
